include:
   - template: DAST.gitlab-ci.yml



stages:
  - build
  - test
  - dast



services:
   - name: mongo:latest
     alias: mongo
   - name: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
     alias: nodegoat

variables:
   ### DAST Variables
   FF_NETWORK_PER_BUILD: "true" # enable network per build so all services can communicate on the same network
   DAST_FULL_SCAN_ENABLED: "true" # do a full scan
   DAST_ZAP_USE_AJAX_SPIDER: "true" # use the ajax spider
   DAST_WEBSITE: "http://nodegoat:4000/" # set the target website
   DAST_AUTH_URL: "http://nodegoat:4000/login" # set the target authentication URL
   # Use CI/CD variables to protect the password (Settings -> CI/CD -> Variables)
   DAST_USERNAME: $GOAT_USERNAME  
   DAST_PASSWORD: $GOAT_PASSWORD
   # Find the username and password fields in the /login page
   DAST_USERNAME_FIELD: "userName"
   DAST_PASSWORD_FIELD: "password"


unitTesting:
    image: node:latest
    cache: 
      paths:
        - node_modules/
    before_script:
      - npm ci
    stage: test
    script: 
      - npm run test


build_and_deploy_container_image:
      services:
      - name: docker:dind
        alias: dind
      image: docker:19.03.5
      stage: build
      before_script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
      script:
        - docker pull $CI_REGISTRY_IMAGE:latest || true
        - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:latest .
        - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
        - docker push $CI_REGISTRY_IMAGE:latest
      after_script:
        - docker logout registry.gitlab.com

 

dast:
   # Register the user first, note this assumes the application is up and running for registration to succeed
   before_script: 
     - curl -v -d 'userName=$GOAT_USERNAME&firstName=test&lastName=test&password=$GOAT_PASSWORD&verify=$GOAT_PASSWORD&email=&_csrf=' "http://nodegoat:4000/signup"
